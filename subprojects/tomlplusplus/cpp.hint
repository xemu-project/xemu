#define TOML_ABI_NAMESPACE_BOOL(...)			static_assert(true)
#define TOML_ABI_NAMESPACE_END					static_assert(true)
#define TOML_ABSTRACT_INTERFACE
#define TOML_ALWAYS_INLINE						inline
#define TOML_ANON_NAMESPACE_END					static_assert(true)
#define TOML_ANON_NAMESPACE_START				namespace
#define TOML_API
#define TOML_ATTR(...)
#define TOML_CLOSED_ENUM
#define TOML_CLOSED_FLAGS_ENUM
#define TOML_CONST_GETTER
#define TOML_CONST_INLINE_GETTER				inline
#define TOML_CONSTRAINED_TEMPLATE(cond, ...)	template <__VA_ARGS__>
#define TOML_EMPTY_BASES
#define TOML_EXPORTED_CLASS
#define TOML_EXPORTED_FREE_FUNCTION
#define TOML_EXPORTED_MEMBER_FUNCTION
#define TOML_EXPORTED_STATIC_FUNCTION
#define TOML_EXTERNAL_LINKAGE
#define TOML_FLAGS_ENUM
#define TOML_HIDDEN_CONSTRAINT(cond, ...)		template <__VA_ARGS__>
#define TOML_IMPL_NAMESPACE_END					static_assert(true)
#define TOML_IMPL_NAMESPACE_START				namespace toml::impl
#define TOML_INTERNAL_LINKAGE					static
#define TOML_LIKELY(...)						(__VA_ARGS__)
#define TOML_LIKELY_CASE
#define TOML_NAMESPACE_END						static_assert(true)
#define TOML_NAMESPACE_START					namespace toml
#define TOML_NEVER_INLINE
#define TOML_NODISCARD
#define TOML_NODISCARD_CTOR
#define TOML_OPEN_ENUM
#define TOML_OPEN_FLAGS_ENUM
#define TOML_PURE_GETTER
#define TOML_PURE_INLINE_GETTER					inline
#define TOML_RETURNS_BY_THROWING
#define TOML_TRIVIAL_ABI
#define TOML_UNLIKELY(...)						(__VA_ARGS__)
#define TOML_UNLIKELY_CASE
