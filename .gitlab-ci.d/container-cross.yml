alpha-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-alpha-cross

amd64-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-amd64-cross

amd64-debian-user-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-all-test-cross

arm64-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-arm64-cross

armel-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-armel-cross

armhf-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-armhf-cross

# We never want to build hexagon in the CI system and by default we
# always want to refer to the master registry where it lives.
hexagon-cross-container:
  extends: .base_job_template
  image: docker:stable
  stage: containers
  variables:
    NAME: debian-hexagon-cross
    GIT_DEPTH: 1
    QEMU_JOB_ONLY_FORKS: 1
  services:
    - docker:dind
  before_script:
    - export TAG="$CI_REGISTRY_IMAGE/qemu/$NAME:latest"
    - export COMMON_TAG="$CI_REGISTRY/qemu-project/qemu/qemu/$NAME:latest"
    - docker info
    - docker login $CI_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
    - echo "TAG:$TAG"
    - echo "COMMON_TAG:$COMMON_TAG"
    - docker pull $COMMON_TAG
    - docker tag $COMMON_TAG $TAG
    - docker push "$TAG"
  after_script:
    - docker logout

hppa-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-hppa-cross

m68k-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-m68k-cross

mips64-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-mips64-cross

mips64el-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-mips64el-cross

mips-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-mips-cross

mipsel-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-mipsel-cross

powerpc-test-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-powerpc-test-cross

ppc64el-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-ppc64el-cross

riscv64-debian-cross-container:
  extends: .container_job_template
  stage: containers
  # as we are currently based on 'sid/unstable' we may break so...
  allow_failure: true
  variables:
    NAME: debian-riscv64-cross

# we can however build TCG tests using a non-sid base
riscv64-debian-test-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-riscv64-test-cross

s390x-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-s390x-cross

sh4-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-sh4-cross

sparc64-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-sparc64-cross

tricore-debian-cross-container:
  extends: .container_job_template
  stage: containers
  variables:
    NAME: debian-tricore-cross

xtensa-debian-cross-container:
  extends: .container_job_template
  variables:
    NAME: debian-xtensa-cross

cris-fedora-cross-container:
  extends: .container_job_template
  variables:
    NAME: fedora-cris-cross

i386-fedora-cross-container:
  extends: .container_job_template
  variables:
    NAME: fedora-i386-cross

win32-fedora-cross-container:
  extends: .container_job_template
  variables:
    NAME: fedora-win32-cross

win64-fedora-cross-container:
  extends: .container_job_template
  variables:
    NAME: fedora-win64-cross
