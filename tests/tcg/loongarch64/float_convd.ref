### Rounding to nearest
from double: f64(nan:0x007ff4000000000000)
  to single: f32(nan:0x7fe00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(-nan:0x00fff8000000000000)
  to single: f32(-nan:0xffc00000) (OK)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(-inf:0x00fff0000000000000)
  to single: f32(-inf:0xff800000) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffffffffff0000000p+1023:0x00ffefffffffffffff)
  to single: f32(-inf:0xff800000) (OVERFLOW INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffe00000000000000p+127:0x00c7efffffe0000000)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffe00000000000000p+127:0x00c7efffffe0000000)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.1874b135ff6540000000p+103:0x00c661874b135ff654)
  to single: f32(-0x1.1874b200000000000000p+103:0xf30c3a59) (INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.c0bab523323b90000000p+99:0x00c62c0bab523323b9)
  to single: f32(-0x1.c0bab600000000000000p+99:0xf1605d5b) (INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.00000000000000000000p+1:0x00c000000000000000)
  to single: f32(-0x1.00000000000000000000p+1:0xc0000000) (OK)
   to int32: -2 (OK)
   to int64: -2 (OK)
  to uint32: -2 (OK)
  to uint64: -2 (OK)
from double: f64(-0x1.00000000000000000000p+0:0x00bff0000000000000)
  to single: f32(-0x1.00000000000000000000p+0:0xbf800000) (OK)
   to int32: -1 (OK)
   to int64: -1 (OK)
  to uint32: -1 (OK)
  to uint64: -1 (OK)
from double: f64(-0x1.00000000000000000000p-1022:0x008010000000000000)
  to single: f32(-0x0.00000000000000000000p+0:0x80000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(-0x1.00000000000000000000p-126:0x00b810000000000000)
  to single: f32(-0x1.00000000000000000000p-126:0x80800000) (OK)
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.00000000000000000000p+0:00000000000000000000)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (OK)
   to int32: 0 (OK)
   to int64: 0 (OK)
  to uint32: 0 (OK)
  to uint64: 0 (OK)
from double: f64(0x1.00000000000000000000p-126:0x003810000000000000)
  to single: f32(0x1.00000000000000000000p-126:0x00800000) (OK)
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000001c5f680000000p-25:0x003e600000001c5f68)
  to single: f32(0x1.00000000000000000000p-25:0x33000000) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.ffffe6cb2fa820000000p-25:0x003e6ffffe6cb2fa82)
  to single: f32(0x1.ffffe600000000000000p-25:0x337ffff3) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.ff801a9af58a10000000p-15:0x003f0ff801a9af58a1)
  to single: f32(0x1.ff801a00000000000000p-15:0x387fc00d) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000c06a1ef50000000p-14:0x003f100000c06a1ef5)
  to single: f32(0x1.00000c00000000000000p-14:0x38800006) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000000000000000000p+0:0x003ff0000000000000)
  to single: f32(0x1.00000000000000000000p+0:0x3f800000) (OK)
   to int32: 1 (OK)
   to int64: 1 (OK)
  to uint32: 1 (OK)
  to uint64: 1 (OK)
from double: f64(0x1.00400000000000000000p+0:0x003ff0040000000000)
  to single: f32(0x1.00400000000000000000p+0:0x3f802000) (OK)
   to int32: 1 (INEXACT )
   to int64: 1 (INEXACT )
  to uint32: 1 (INEXACT )
  to uint64: 1 (INEXACT )
from double: f64(0x1.00000000000000000000p-1022:0x000010000000000000)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.9ea82a22876800000000p-1022:0x000009ea82a2287680)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.ab98fba8432100000000p-1022:0x00000ab98fba843210)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000000000000000000p+0:0x003ff0000000000000)
  to single: f32(0x1.00000000000000000000p+0:0x3f800000) (OK)
   to int32: 1 (OK)
   to int64: 1 (OK)
  to uint32: 1 (OK)
  to uint64: 1 (OK)
from double: f64(0x1.00000000000000000000p+1:0x004000000000000000)
  to single: f32(0x1.00000000000000000000p+1:0x40000000) (OK)
   to int32: 2 (OK)
   to int64: 2 (OK)
  to uint32: 2 (OK)
  to uint64: 2 (OK)
from double: f64(0x1.5bf0a8b1457690000000p+1:0x004005bf0a8b145769)
  to single: f32(0x1.5bf0a800000000000000p+1:0x402df854) (INEXACT )
   to int32: 2 (INEXACT )
   to int64: 2 (INEXACT )
  to uint32: 2 (INEXACT )
  to uint64: 2 (INEXACT )
from double: f64(0x1.921fb54442d180000000p+1:0x00400921fb54442d18)
  to single: f32(0x1.921fb600000000000000p+1:0x40490fdb) (INEXACT )
   to int32: 3 (INEXACT )
   to int64: 3 (INEXACT )
  to uint32: 3 (INEXACT )
  to uint64: 3 (INEXACT )
from double: f64(0x1.ffbe0000000000000000p+15:0x0040effbe000000000)
  to single: f32(0x1.ffbe0000000000000000p+15:0x477fdf00) (OK)
   to int32: 65503 (OK)
   to int64: 65503 (OK)
  to uint32: 65503 (OK)
  to uint64: 65503 (OK)
from double: f64(0x1.ffc00000000000000000p+15:0x0040effc0000000000)
  to single: f32(0x1.ffc00000000000000000p+15:0x477fe000) (OK)
   to int32: 65504 (OK)
   to int64: 65504 (OK)
  to uint32: 65504 (OK)
  to uint64: 65504 (OK)
from double: f64(0x1.ffc20000000000000000p+15:0x0040effc2000000000)
  to single: f32(0x1.ffc20000000000000000p+15:0x477fe100) (OK)
   to int32: 65505 (OK)
   to int64: 65505 (OK)
  to uint32: 65505 (OK)
  to uint64: 65505 (OK)
from double: f64(0x1.ffbf0000000000000000p+16:0x0040fffbf000000000)
  to single: f32(0x1.ffbf0000000000000000p+16:0x47ffdf80) (OK)
   to int32: 131007 (OK)
   to int64: 131007 (OK)
  to uint32: 131007 (OK)
  to uint64: 131007 (OK)
from double: f64(0x1.ffc00000000000000000p+16:0x0040fffc0000000000)
  to single: f32(0x1.ffc00000000000000000p+16:0x47ffe000) (OK)
   to int32: 131008 (OK)
   to int64: 131008 (OK)
  to uint32: 131008 (OK)
  to uint64: 131008 (OK)
from double: f64(0x1.ffc10000000000000000p+16:0x0040fffc1000000000)
  to single: f32(0x1.ffc10000000000000000p+16:0x47ffe080) (OK)
   to int32: 131009 (OK)
   to int64: 131009 (OK)
  to uint32: 131009 (OK)
  to uint64: 131009 (OK)
from double: f64(0x1.fffffffc000000000000p+30:0x0041dfffffffc00000)
  to single: f32(0x1.00000000000000000000p+31:0x4f000000) (INEXACT )
   to int32: 2147483647 (OK)
   to int64: 2147483647 (OK)
  to uint32: 2147483647 (OK)
  to uint64: 2147483647 (OK)
from double: f64(0x1.fffffe00000000000000p+127:0x0047efffffe0000000)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(0x1.fffffe00000000000000p+127:0x0047efffffe0000000)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(0x1.fffffffffffff0000000p+1023:0x007fefffffffffffff)
  to single: f32(inf:0x7f800000) (OVERFLOW INEXACT )
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(inf:0x007ff0000000000000)
  to single: f32(inf:0x7f800000) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INVALID)
  to uint64: -1 (INVALID)
from double: f64(nan:0x007ff8000000000000)
  to single: f32(nan:0x7fc00000) (OK)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(nan:0x007ff0000000000001)
  to single: f32(nan:0x7fc00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(nan:0x007ff4000000000000)
  to single: f32(nan:0x7fe00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
### Rounding upwards
from double: f64(nan:0x007ff4000000000000)
  to single: f32(nan:0x7fe00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(-nan:0x00fff8000000000000)
  to single: f32(-nan:0xffc00000) (OK)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(-inf:0x00fff0000000000000)
  to single: f32(-inf:0xff800000) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffffffffff0000000p+1023:0x00ffefffffffffffff)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OVERFLOW INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffe00000000000000p+127:0x00c7efffffe0000000)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffe00000000000000p+127:0x00c7efffffe0000000)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.1874b135ff6540000000p+103:0x00c661874b135ff654)
  to single: f32(-0x1.1874b000000000000000p+103:0xf30c3a58) (INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.c0bab523323b90000000p+99:0x00c62c0bab523323b9)
  to single: f32(-0x1.c0bab400000000000000p+99:0xf1605d5a) (INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.00000000000000000000p+1:0x00c000000000000000)
  to single: f32(-0x1.00000000000000000000p+1:0xc0000000) (OK)
   to int32: -2 (OK)
   to int64: -2 (OK)
  to uint32: -2 (OK)
  to uint64: -2 (OK)
from double: f64(-0x1.00000000000000000000p+0:0x00bff0000000000000)
  to single: f32(-0x1.00000000000000000000p+0:0xbf800000) (OK)
   to int32: -1 (OK)
   to int64: -1 (OK)
  to uint32: -1 (OK)
  to uint64: -1 (OK)
from double: f64(-0x1.00000000000000000000p-1022:0x008010000000000000)
  to single: f32(-0x0.00000000000000000000p+0:0x80000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(-0x1.00000000000000000000p-126:0x00b810000000000000)
  to single: f32(-0x1.00000000000000000000p-126:0x80800000) (OK)
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.00000000000000000000p+0:00000000000000000000)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (OK)
   to int32: 0 (OK)
   to int64: 0 (OK)
  to uint32: 0 (OK)
  to uint64: 0 (OK)
from double: f64(0x1.00000000000000000000p-126:0x003810000000000000)
  to single: f32(0x1.00000000000000000000p-126:0x00800000) (OK)
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000001c5f680000000p-25:0x003e600000001c5f68)
  to single: f32(0x1.00000200000000000000p-25:0x33000001) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.ffffe6cb2fa820000000p-25:0x003e6ffffe6cb2fa82)
  to single: f32(0x1.ffffe800000000000000p-25:0x337ffff4) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.ff801a9af58a10000000p-15:0x003f0ff801a9af58a1)
  to single: f32(0x1.ff801c00000000000000p-15:0x387fc00e) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000c06a1ef50000000p-14:0x003f100000c06a1ef5)
  to single: f32(0x1.00000e00000000000000p-14:0x38800007) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000000000000000000p+0:0x003ff0000000000000)
  to single: f32(0x1.00000000000000000000p+0:0x3f800000) (OK)
   to int32: 1 (OK)
   to int64: 1 (OK)
  to uint32: 1 (OK)
  to uint64: 1 (OK)
from double: f64(0x1.00400000000000000000p+0:0x003ff0040000000000)
  to single: f32(0x1.00400000000000000000p+0:0x3f802000) (OK)
   to int32: 1 (INEXACT )
   to int64: 1 (INEXACT )
  to uint32: 1 (INEXACT )
  to uint64: 1 (INEXACT )
from double: f64(0x1.00000000000000000000p-1022:0x000010000000000000)
  to single: f32(0x1.00000000000000000000p-149:0x00000001) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.9ea82a22876800000000p-1022:0x000009ea82a2287680)
  to single: f32(0x1.00000000000000000000p-149:0x00000001) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.ab98fba8432100000000p-1022:0x00000ab98fba843210)
  to single: f32(0x1.00000000000000000000p-149:0x00000001) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000000000000000000p+0:0x003ff0000000000000)
  to single: f32(0x1.00000000000000000000p+0:0x3f800000) (OK)
   to int32: 1 (OK)
   to int64: 1 (OK)
  to uint32: 1 (OK)
  to uint64: 1 (OK)
from double: f64(0x1.00000000000000000000p+1:0x004000000000000000)
  to single: f32(0x1.00000000000000000000p+1:0x40000000) (OK)
   to int32: 2 (OK)
   to int64: 2 (OK)
  to uint32: 2 (OK)
  to uint64: 2 (OK)
from double: f64(0x1.5bf0a8b1457690000000p+1:0x004005bf0a8b145769)
  to single: f32(0x1.5bf0aa00000000000000p+1:0x402df855) (INEXACT )
   to int32: 2 (INEXACT )
   to int64: 2 (INEXACT )
  to uint32: 2 (INEXACT )
  to uint64: 2 (INEXACT )
from double: f64(0x1.921fb54442d180000000p+1:0x00400921fb54442d18)
  to single: f32(0x1.921fb600000000000000p+1:0x40490fdb) (INEXACT )
   to int32: 3 (INEXACT )
   to int64: 3 (INEXACT )
  to uint32: 3 (INEXACT )
  to uint64: 3 (INEXACT )
from double: f64(0x1.ffbe0000000000000000p+15:0x0040effbe000000000)
  to single: f32(0x1.ffbe0000000000000000p+15:0x477fdf00) (OK)
   to int32: 65503 (OK)
   to int64: 65503 (OK)
  to uint32: 65503 (OK)
  to uint64: 65503 (OK)
from double: f64(0x1.ffc00000000000000000p+15:0x0040effc0000000000)
  to single: f32(0x1.ffc00000000000000000p+15:0x477fe000) (OK)
   to int32: 65504 (OK)
   to int64: 65504 (OK)
  to uint32: 65504 (OK)
  to uint64: 65504 (OK)
from double: f64(0x1.ffc20000000000000000p+15:0x0040effc2000000000)
  to single: f32(0x1.ffc20000000000000000p+15:0x477fe100) (OK)
   to int32: 65505 (OK)
   to int64: 65505 (OK)
  to uint32: 65505 (OK)
  to uint64: 65505 (OK)
from double: f64(0x1.ffbf0000000000000000p+16:0x0040fffbf000000000)
  to single: f32(0x1.ffbf0000000000000000p+16:0x47ffdf80) (OK)
   to int32: 131007 (OK)
   to int64: 131007 (OK)
  to uint32: 131007 (OK)
  to uint64: 131007 (OK)
from double: f64(0x1.ffc00000000000000000p+16:0x0040fffc0000000000)
  to single: f32(0x1.ffc00000000000000000p+16:0x47ffe000) (OK)
   to int32: 131008 (OK)
   to int64: 131008 (OK)
  to uint32: 131008 (OK)
  to uint64: 131008 (OK)
from double: f64(0x1.ffc10000000000000000p+16:0x0040fffc1000000000)
  to single: f32(0x1.ffc10000000000000000p+16:0x47ffe080) (OK)
   to int32: 131009 (OK)
   to int64: 131009 (OK)
  to uint32: 131009 (OK)
  to uint64: 131009 (OK)
from double: f64(0x1.fffffffc000000000000p+30:0x0041dfffffffc00000)
  to single: f32(0x1.00000000000000000000p+31:0x4f000000) (INEXACT )
   to int32: 2147483647 (OK)
   to int64: 2147483647 (OK)
  to uint32: 2147483647 (OK)
  to uint64: 2147483647 (OK)
from double: f64(0x1.fffffe00000000000000p+127:0x0047efffffe0000000)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(0x1.fffffe00000000000000p+127:0x0047efffffe0000000)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(0x1.fffffffffffff0000000p+1023:0x007fefffffffffffff)
  to single: f32(inf:0x7f800000) (OVERFLOW INEXACT )
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(inf:0x007ff0000000000000)
  to single: f32(inf:0x7f800000) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INVALID)
  to uint64: -1 (INVALID)
from double: f64(nan:0x007ff8000000000000)
  to single: f32(nan:0x7fc00000) (OK)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(nan:0x007ff0000000000001)
  to single: f32(nan:0x7fc00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(nan:0x007ff4000000000000)
  to single: f32(nan:0x7fe00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
### Rounding downwards
from double: f64(nan:0x007ff4000000000000)
  to single: f32(nan:0x7fe00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(-nan:0x00fff8000000000000)
  to single: f32(-nan:0xffc00000) (OK)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(-inf:0x00fff0000000000000)
  to single: f32(-inf:0xff800000) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffffffffff0000000p+1023:0x00ffefffffffffffff)
  to single: f32(-inf:0xff800000) (OVERFLOW INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffe00000000000000p+127:0x00c7efffffe0000000)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffe00000000000000p+127:0x00c7efffffe0000000)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.1874b135ff6540000000p+103:0x00c661874b135ff654)
  to single: f32(-0x1.1874b200000000000000p+103:0xf30c3a59) (INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.c0bab523323b90000000p+99:0x00c62c0bab523323b9)
  to single: f32(-0x1.c0bab600000000000000p+99:0xf1605d5b) (INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.00000000000000000000p+1:0x00c000000000000000)
  to single: f32(-0x1.00000000000000000000p+1:0xc0000000) (OK)
   to int32: -2 (OK)
   to int64: -2 (OK)
  to uint32: -2 (OK)
  to uint64: -2 (OK)
from double: f64(-0x1.00000000000000000000p+0:0x00bff0000000000000)
  to single: f32(-0x1.00000000000000000000p+0:0xbf800000) (OK)
   to int32: -1 (OK)
   to int64: -1 (OK)
  to uint32: -1 (OK)
  to uint64: -1 (OK)
from double: f64(-0x1.00000000000000000000p-1022:0x008010000000000000)
  to single: f32(-0x1.00000000000000000000p-149:0x80000001) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(-0x1.00000000000000000000p-126:0x00b810000000000000)
  to single: f32(-0x1.00000000000000000000p-126:0x80800000) (OK)
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.00000000000000000000p+0:00000000000000000000)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (OK)
   to int32: 0 (OK)
   to int64: 0 (OK)
  to uint32: 0 (OK)
  to uint64: 0 (OK)
from double: f64(0x1.00000000000000000000p-126:0x003810000000000000)
  to single: f32(0x1.00000000000000000000p-126:0x00800000) (OK)
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000001c5f680000000p-25:0x003e600000001c5f68)
  to single: f32(0x1.00000000000000000000p-25:0x33000000) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.ffffe6cb2fa820000000p-25:0x003e6ffffe6cb2fa82)
  to single: f32(0x1.ffffe600000000000000p-25:0x337ffff3) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.ff801a9af58a10000000p-15:0x003f0ff801a9af58a1)
  to single: f32(0x1.ff801a00000000000000p-15:0x387fc00d) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000c06a1ef50000000p-14:0x003f100000c06a1ef5)
  to single: f32(0x1.00000c00000000000000p-14:0x38800006) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000000000000000000p+0:0x003ff0000000000000)
  to single: f32(0x1.00000000000000000000p+0:0x3f800000) (OK)
   to int32: 1 (OK)
   to int64: 1 (OK)
  to uint32: 1 (OK)
  to uint64: 1 (OK)
from double: f64(0x1.00400000000000000000p+0:0x003ff0040000000000)
  to single: f32(0x1.00400000000000000000p+0:0x3f802000) (OK)
   to int32: 1 (INEXACT )
   to int64: 1 (INEXACT )
  to uint32: 1 (INEXACT )
  to uint64: 1 (INEXACT )
from double: f64(0x1.00000000000000000000p-1022:0x000010000000000000)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.9ea82a22876800000000p-1022:0x000009ea82a2287680)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.ab98fba8432100000000p-1022:0x00000ab98fba843210)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000000000000000000p+0:0x003ff0000000000000)
  to single: f32(0x1.00000000000000000000p+0:0x3f800000) (OK)
   to int32: 1 (OK)
   to int64: 1 (OK)
  to uint32: 1 (OK)
  to uint64: 1 (OK)
from double: f64(0x1.00000000000000000000p+1:0x004000000000000000)
  to single: f32(0x1.00000000000000000000p+1:0x40000000) (OK)
   to int32: 2 (OK)
   to int64: 2 (OK)
  to uint32: 2 (OK)
  to uint64: 2 (OK)
from double: f64(0x1.5bf0a8b1457690000000p+1:0x004005bf0a8b145769)
  to single: f32(0x1.5bf0a800000000000000p+1:0x402df854) (INEXACT )
   to int32: 2 (INEXACT )
   to int64: 2 (INEXACT )
  to uint32: 2 (INEXACT )
  to uint64: 2 (INEXACT )
from double: f64(0x1.921fb54442d180000000p+1:0x00400921fb54442d18)
  to single: f32(0x1.921fb400000000000000p+1:0x40490fda) (INEXACT )
   to int32: 3 (INEXACT )
   to int64: 3 (INEXACT )
  to uint32: 3 (INEXACT )
  to uint64: 3 (INEXACT )
from double: f64(0x1.ffbe0000000000000000p+15:0x0040effbe000000000)
  to single: f32(0x1.ffbe0000000000000000p+15:0x477fdf00) (OK)
   to int32: 65503 (OK)
   to int64: 65503 (OK)
  to uint32: 65503 (OK)
  to uint64: 65503 (OK)
from double: f64(0x1.ffc00000000000000000p+15:0x0040effc0000000000)
  to single: f32(0x1.ffc00000000000000000p+15:0x477fe000) (OK)
   to int32: 65504 (OK)
   to int64: 65504 (OK)
  to uint32: 65504 (OK)
  to uint64: 65504 (OK)
from double: f64(0x1.ffc20000000000000000p+15:0x0040effc2000000000)
  to single: f32(0x1.ffc20000000000000000p+15:0x477fe100) (OK)
   to int32: 65505 (OK)
   to int64: 65505 (OK)
  to uint32: 65505 (OK)
  to uint64: 65505 (OK)
from double: f64(0x1.ffbf0000000000000000p+16:0x0040fffbf000000000)
  to single: f32(0x1.ffbf0000000000000000p+16:0x47ffdf80) (OK)
   to int32: 131007 (OK)
   to int64: 131007 (OK)
  to uint32: 131007 (OK)
  to uint64: 131007 (OK)
from double: f64(0x1.ffc00000000000000000p+16:0x0040fffc0000000000)
  to single: f32(0x1.ffc00000000000000000p+16:0x47ffe000) (OK)
   to int32: 131008 (OK)
   to int64: 131008 (OK)
  to uint32: 131008 (OK)
  to uint64: 131008 (OK)
from double: f64(0x1.ffc10000000000000000p+16:0x0040fffc1000000000)
  to single: f32(0x1.ffc10000000000000000p+16:0x47ffe080) (OK)
   to int32: 131009 (OK)
   to int64: 131009 (OK)
  to uint32: 131009 (OK)
  to uint64: 131009 (OK)
from double: f64(0x1.fffffffc000000000000p+30:0x0041dfffffffc00000)
  to single: f32(0x1.fffffe00000000000000p+30:0x4effffff) (INEXACT )
   to int32: 2147483647 (OK)
   to int64: 2147483647 (OK)
  to uint32: 2147483647 (OK)
  to uint64: 2147483647 (OK)
from double: f64(0x1.fffffe00000000000000p+127:0x0047efffffe0000000)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(0x1.fffffe00000000000000p+127:0x0047efffffe0000000)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(0x1.fffffffffffff0000000p+1023:0x007fefffffffffffff)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OVERFLOW INEXACT )
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(inf:0x007ff0000000000000)
  to single: f32(inf:0x7f800000) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INVALID)
  to uint64: -1 (INVALID)
from double: f64(nan:0x007ff8000000000000)
  to single: f32(nan:0x7fc00000) (OK)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(nan:0x007ff0000000000001)
  to single: f32(nan:0x7fc00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(nan:0x007ff4000000000000)
  to single: f32(nan:0x7fe00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
### Rounding to zero
from double: f64(nan:0x007ff4000000000000)
  to single: f32(nan:0x7fe00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(-nan:0x00fff8000000000000)
  to single: f32(-nan:0xffc00000) (OK)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(-inf:0x00fff0000000000000)
  to single: f32(-inf:0xff800000) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffffffffff0000000p+1023:0x00ffefffffffffffff)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OVERFLOW INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffe00000000000000p+127:0x00c7efffffe0000000)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.fffffe00000000000000p+127:0x00c7efffffe0000000)
  to single: f32(-0x1.fffffe00000000000000p+127:0xff7fffff) (OK)
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.1874b135ff6540000000p+103:0x00c661874b135ff654)
  to single: f32(-0x1.1874b000000000000000p+103:0xf30c3a58) (INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.c0bab523323b90000000p+99:0x00c62c0bab523323b9)
  to single: f32(-0x1.c0bab400000000000000p+99:0xf1605d5a) (INEXACT )
   to int32: -2147483648 (INVALID)
   to int64: -9223372036854775808 (INVALID)
  to uint32: -2147483648 (INVALID)
  to uint64: -9223372036854775808 (INVALID)
from double: f64(-0x1.00000000000000000000p+1:0x00c000000000000000)
  to single: f32(-0x1.00000000000000000000p+1:0xc0000000) (OK)
   to int32: -2 (OK)
   to int64: -2 (OK)
  to uint32: -2 (OK)
  to uint64: -2 (OK)
from double: f64(-0x1.00000000000000000000p+0:0x00bff0000000000000)
  to single: f32(-0x1.00000000000000000000p+0:0xbf800000) (OK)
   to int32: -1 (OK)
   to int64: -1 (OK)
  to uint32: -1 (OK)
  to uint64: -1 (OK)
from double: f64(-0x1.00000000000000000000p-1022:0x008010000000000000)
  to single: f32(-0x0.00000000000000000000p+0:0x80000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(-0x1.00000000000000000000p-126:0x00b810000000000000)
  to single: f32(-0x1.00000000000000000000p-126:0x80800000) (OK)
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.00000000000000000000p+0:00000000000000000000)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (OK)
   to int32: 0 (OK)
   to int64: 0 (OK)
  to uint32: 0 (OK)
  to uint64: 0 (OK)
from double: f64(0x1.00000000000000000000p-126:0x003810000000000000)
  to single: f32(0x1.00000000000000000000p-126:0x00800000) (OK)
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000001c5f680000000p-25:0x003e600000001c5f68)
  to single: f32(0x1.00000000000000000000p-25:0x33000000) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.ffffe6cb2fa820000000p-25:0x003e6ffffe6cb2fa82)
  to single: f32(0x1.ffffe600000000000000p-25:0x337ffff3) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.ff801a9af58a10000000p-15:0x003f0ff801a9af58a1)
  to single: f32(0x1.ff801a00000000000000p-15:0x387fc00d) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000c06a1ef50000000p-14:0x003f100000c06a1ef5)
  to single: f32(0x1.00000c00000000000000p-14:0x38800006) (INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000000000000000000p+0:0x003ff0000000000000)
  to single: f32(0x1.00000000000000000000p+0:0x3f800000) (OK)
   to int32: 1 (OK)
   to int64: 1 (OK)
  to uint32: 1 (OK)
  to uint64: 1 (OK)
from double: f64(0x1.00400000000000000000p+0:0x003ff0040000000000)
  to single: f32(0x1.00400000000000000000p+0:0x3f802000) (OK)
   to int32: 1 (INEXACT )
   to int64: 1 (INEXACT )
  to uint32: 1 (INEXACT )
  to uint64: 1 (INEXACT )
from double: f64(0x1.00000000000000000000p-1022:0x000010000000000000)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.9ea82a22876800000000p-1022:0x000009ea82a2287680)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x0.ab98fba8432100000000p-1022:0x00000ab98fba843210)
  to single: f32(0x0.00000000000000000000p+0:0000000000) (UNDERFLOW INEXACT )
   to int32: 0 (INEXACT )
   to int64: 0 (INEXACT )
  to uint32: 0 (INEXACT )
  to uint64: 0 (INEXACT )
from double: f64(0x1.00000000000000000000p+0:0x003ff0000000000000)
  to single: f32(0x1.00000000000000000000p+0:0x3f800000) (OK)
   to int32: 1 (OK)
   to int64: 1 (OK)
  to uint32: 1 (OK)
  to uint64: 1 (OK)
from double: f64(0x1.00000000000000000000p+1:0x004000000000000000)
  to single: f32(0x1.00000000000000000000p+1:0x40000000) (OK)
   to int32: 2 (OK)
   to int64: 2 (OK)
  to uint32: 2 (OK)
  to uint64: 2 (OK)
from double: f64(0x1.5bf0a8b1457690000000p+1:0x004005bf0a8b145769)
  to single: f32(0x1.5bf0a800000000000000p+1:0x402df854) (INEXACT )
   to int32: 2 (INEXACT )
   to int64: 2 (INEXACT )
  to uint32: 2 (INEXACT )
  to uint64: 2 (INEXACT )
from double: f64(0x1.921fb54442d180000000p+1:0x00400921fb54442d18)
  to single: f32(0x1.921fb400000000000000p+1:0x40490fda) (INEXACT )
   to int32: 3 (INEXACT )
   to int64: 3 (INEXACT )
  to uint32: 3 (INEXACT )
  to uint64: 3 (INEXACT )
from double: f64(0x1.ffbe0000000000000000p+15:0x0040effbe000000000)
  to single: f32(0x1.ffbe0000000000000000p+15:0x477fdf00) (OK)
   to int32: 65503 (OK)
   to int64: 65503 (OK)
  to uint32: 65503 (OK)
  to uint64: 65503 (OK)
from double: f64(0x1.ffc00000000000000000p+15:0x0040effc0000000000)
  to single: f32(0x1.ffc00000000000000000p+15:0x477fe000) (OK)
   to int32: 65504 (OK)
   to int64: 65504 (OK)
  to uint32: 65504 (OK)
  to uint64: 65504 (OK)
from double: f64(0x1.ffc20000000000000000p+15:0x0040effc2000000000)
  to single: f32(0x1.ffc20000000000000000p+15:0x477fe100) (OK)
   to int32: 65505 (OK)
   to int64: 65505 (OK)
  to uint32: 65505 (OK)
  to uint64: 65505 (OK)
from double: f64(0x1.ffbf0000000000000000p+16:0x0040fffbf000000000)
  to single: f32(0x1.ffbf0000000000000000p+16:0x47ffdf80) (OK)
   to int32: 131007 (OK)
   to int64: 131007 (OK)
  to uint32: 131007 (OK)
  to uint64: 131007 (OK)
from double: f64(0x1.ffc00000000000000000p+16:0x0040fffc0000000000)
  to single: f32(0x1.ffc00000000000000000p+16:0x47ffe000) (OK)
   to int32: 131008 (OK)
   to int64: 131008 (OK)
  to uint32: 131008 (OK)
  to uint64: 131008 (OK)
from double: f64(0x1.ffc10000000000000000p+16:0x0040fffc1000000000)
  to single: f32(0x1.ffc10000000000000000p+16:0x47ffe080) (OK)
   to int32: 131009 (OK)
   to int64: 131009 (OK)
  to uint32: 131009 (OK)
  to uint64: 131009 (OK)
from double: f64(0x1.fffffffc000000000000p+30:0x0041dfffffffc00000)
  to single: f32(0x1.fffffe00000000000000p+30:0x4effffff) (INEXACT )
   to int32: 2147483647 (OK)
   to int64: 2147483647 (OK)
  to uint32: 2147483647 (OK)
  to uint64: 2147483647 (OK)
from double: f64(0x1.fffffe00000000000000p+127:0x0047efffffe0000000)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(0x1.fffffe00000000000000p+127:0x0047efffffe0000000)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(0x1.fffffffffffff0000000p+1023:0x007fefffffffffffff)
  to single: f32(0x1.fffffe00000000000000p+127:0x7f7fffff) (OVERFLOW INEXACT )
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INEXACT INVALID)
  to uint64: -1 (INEXACT INVALID)
from double: f64(inf:0x007ff0000000000000)
  to single: f32(inf:0x7f800000) (OK)
   to int32: 2147483647 (INVALID)
   to int64: 9223372036854775807 (INVALID)
  to uint32: -1 (INVALID)
  to uint64: -1 (INVALID)
from double: f64(nan:0x007ff8000000000000)
  to single: f32(nan:0x7fc00000) (OK)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(nan:0x007ff0000000000001)
  to single: f32(nan:0x7fc00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
from double: f64(nan:0x007ff4000000000000)
  to single: f32(nan:0x7fe00000) (INVALID)
   to int32: 0 (INVALID)
   to int64: 0 (INVALID)
  to uint32: 0 (INVALID)
  to uint64: 0 (INVALID)
