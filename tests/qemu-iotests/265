#!/usr/bin/env bash
# group: rw auto quick
#
# Test reverse-ordered qcow2 writes on a sub-cluster level
#
# Copyright (C) 2019 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

seq=$(basename $0)
echo "QA output created by $seq"

status=1	# failure is the default!

_cleanup()
{
    _cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

# qcow2-specific test
_supported_fmt qcow2
_supported_proto file fuse
_supported_os Linux

echo '--- Writing to the image ---'

# Reduce cluster size so we get more and quicker I/O
_make_test_img -o 'cluster_size=4096' 1M
(for ((kb = 1024 - 4; kb >= 0; kb -= 4)); do \
     echo "aio_write -P 42 $((kb + 1))k 2k"; \
 done) \
 | $QEMU_IO "$TEST_IMG" > /dev/null

echo '--- Verifying its content ---'

(for ((kb = 0; kb < 1024; kb += 4)); do \
    echo "read -P 0 ${kb}k 1k"; \
    echo "read -P 42 $((kb + 1))k 2k"; \
    echo "read -P 0 $((kb + 3))k 1k"; \
 done) \
 | $QEMU_IO "$TEST_IMG" | _filter_qemu_io | grep 'verification'

# Status of qemu-io
if [ ${PIPESTATUS[1]} = 0 ]; then
    echo 'Content verified.'
fi

# success, all done
echo "*** done"
rm -f $seq.full
status=0
