#!/usr/bin/env bash
# group: img auto quick
#
# Make sure qemu-img can create 5TB images
#
# Based on a testcase from Chris Wright,
# https://bugzilla.redhat.com/show_bug.cgi?id=491943
#
# Copyright (C) 2009 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator
owner=hch@lst.de

seq=`basename $0`
echo "QA output created by $seq"

status=1	# failure is the default!

_cleanup()
{
	_cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_supported_fmt generic
_supported_proto generic
_supported_os Linux
_unsupported_imgopts "subformat=twoGbMaxExtentFlat" \
                     "subformat=twoGbMaxExtentSparse" \
                     "subformat=streamOptimized"

# vpc is limited to 127GB, so we can't test it here
if [ "$IMGFMT" = "vpc" ]; then
    _notrun "image format $IMGFMT does not support large image sizes"
fi

# Sanity check: For raw, we require a file system that permits the creation
# of a HUGE (but very sparse) file. Check we can create it before continuing.
if [ "$IMGFMT" = "raw" ]; then
    _require_large_file 5T
fi

echo
echo "creating large image"
_make_test_img 5000G

echo
echo "small read"
$QEMU_IO -c "read 1024 4096" "$TEST_IMG" | _filter_qemu_io

echo
echo "small write"
$QEMU_IO -c "write 8192 4096" "$TEST_IMG" | _filter_qemu_io

# success, all done
echo "*** done"
rm -f $seq.full
status=0
