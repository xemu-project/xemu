#!/usr/bin/env bash
# group: rw quick
#
# Test error code paths for invalid QED images
#
# The aim of this test is to exercise the error paths in qed_open() to ensure
# there are no crashes with invalid input files.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator
owner=stefanha@redhat.com

seq=`basename $0`
echo "QA output created by $seq"

status=1	# failure is the default!

_cleanup()
{
	_cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_supported_fmt qed
_supported_proto generic
_supported_os Linux


size=128M

echo
echo "== truncated header cluster =="
_make_test_img $size
truncate -s 512 "$TEST_IMG"
$QEMU_IO -f "$IMGFMT" -c "read 0 $size" "$TEST_IMG" 2>&1 | _filter_qemu_io | _filter_testdir

echo
echo "== invalid header magic =="
_make_test_img $size
poke_file "$TEST_IMG" "0" "QEDX"
$QEMU_IO -f "$IMGFMT" -c "read 0 $size" "$TEST_IMG" 2>&1 | _filter_qemu_io | _filter_testdir

echo
echo "== invalid cluster size =="
_make_test_img $size
poke_file "$TEST_IMG" "4" "\xff\xff\xff\xff"
$QEMU_IO -f "$IMGFMT" -c "read 0 $size" "$TEST_IMG" 2>&1 | _filter_qemu_io | _filter_testdir

echo
echo "== invalid table size =="
_make_test_img $size
poke_file "$TEST_IMG" "8" "\xff\xff\xff\xff"
$QEMU_IO -f "$IMGFMT" -c "read 0 $size" "$TEST_IMG" 2>&1 | _filter_qemu_io | _filter_testdir

echo
echo "== invalid header size =="
_make_test_img $size
poke_file "$TEST_IMG" "12" "\xff\xff\xff\xff"
$QEMU_IO -f "$IMGFMT" -c "read 0 $size" "$TEST_IMG" 2>&1 | _filter_qemu_io | _filter_testdir

echo
echo "== invalid L1 table offset =="
_make_test_img $size
poke_file "$TEST_IMG" "40" "\xff\xff\xff\xff\xff\xff\xff\xff"
$QEMU_IO -f "$IMGFMT" -c "read 0 $size" "$TEST_IMG" 2>&1 | _filter_qemu_io | _filter_testdir

echo
echo "== invalid image size =="
_make_test_img $size
poke_file "$TEST_IMG" "48" "\xff\xff\xff\xff\xff\xff\xff\xff"
$QEMU_IO -f "$IMGFMT" -c "read 0 $size" "$TEST_IMG" 2>&1 | _filter_qemu_io | _filter_testdir

# success, all done
echo "*** done"
rm -f $seq.full
status=0
