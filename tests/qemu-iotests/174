#!/usr/bin/env bash
# group: auto
#
# Test that qemu-io fail with non-zero exit code
#
# Copyright (C) 2017 Nir Soffer <nirsof@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator
owner=nirsof@gmail.com

seq=`basename $0`
echo "QA output created by $seq"

status=1	# failure is the default!

_cleanup()
{
	_cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_unsupported_fmt raw


size=256K

# _make_test_img may set variables that we need to retain.  Everything
# in a pipe is executed in a subshell, so doing so would throw away
# all changes.  Therefore, we have to store the output in some temp
# file and filter that.
scratch_out="$TEST_DIR/img-create.out"
IMGFMT=raw IMGKEYSECRET= _make_test_img --no-opts $size >"$scratch_out"
_filter_imgfmt <"$scratch_out"
rm -f "$scratch_out"

echo
echo "== reading wrong format should fail =="
$QEMU_IO -f $IMGFMT -c "read 0 $size" "$TEST_IMG" 2>/dev/null
test $? -eq 1 || _fail "did not fail"

echo
echo "== reading missing file should fail =="
$QEMU_IO -c "read 0 $size" "$TEST_DIR/missing" 2>/dev/null
test $? -eq 1 || _fail "did not fail"

# success, all done
echo "*** done"
rm -f $seq.full
status=0
