#!/usr/bin/env bash
# group: rw auto
#
# Check qemu-img option parsing
#
# Copyright (C) 2013 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator
owner=kwolf@redhat.com

seq=`basename $0`
echo "QA output created by $seq"

status=1	# failure is the default!

_cleanup()
{
	_cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_supported_fmt qcow2
_supported_proto file

filter_test_dir()
{
    sed -e "s#$IMGPROTO:$TEST_DIR#TEST_DIR#g" \
        -e "s#$TEST_DIR#TEST_DIR#g"
}

test_qemu_img()
{
    echo qemu-img "$@" | filter_test_dir
    $QEMU_IMG "$@" 2>&1 | filter_test_dir
    echo
}

echo "=== Check correct interpretation of suffixes for image size ==="
echo
sizes="1024 1024b 1k 1K 1M 1G 1T "
sizes+="1024.0 1024.0b 1.5k 1.5K 1.5M 1.5G 1.5T"

echo "== 1. Traditional size parameter =="
echo
for s in $sizes; do
    test_qemu_img create -f $IMGFMT "$TEST_IMG" $s
done

echo "== 2. Specifying size via -o =="
echo
for s in $sizes; do
    test_qemu_img create -f $IMGFMT -o size=$s "$TEST_IMG"
done

echo "== 3. Invalid sizes =="
echo
sizes="-1024 -1k 1kilobyte foobar"

for s in $sizes; do
    test_qemu_img create -f $IMGFMT "$TEST_IMG" -- $s
    test_qemu_img create -f $IMGFMT -o size=$s "$TEST_IMG"
done

echo "== 4. Specify size twice (-o and traditional parameter) =="
echo

test_qemu_img create -f $IMGFMT -o size=10M "$TEST_IMG" 20M

echo "== Check correct interpretation of suffixes for cluster size =="
echo
sizes="1024 1024b 1k 1K 1M "
sizes+="1024.0 1024.0b 0.5k 0.5K 0.5M"

for s in $sizes; do
    test_qemu_img create -f $IMGFMT -o cluster_size=$s "$TEST_IMG" 64M
done

echo "== Check compat level option =="
echo
test_qemu_img create -f $IMGFMT -o compat=0.10 "$TEST_IMG" 64M
test_qemu_img create -f $IMGFMT -o compat=1.1 "$TEST_IMG" 64M

test_qemu_img create -f $IMGFMT -o compat=0.42 "$TEST_IMG" 64M
test_qemu_img create -f $IMGFMT -o compat=foobar "$TEST_IMG" 64M

echo "== Check preallocation option =="
echo
test_qemu_img create -f $IMGFMT -o preallocation=off "$TEST_IMG" 64M
test_qemu_img create -f $IMGFMT -o preallocation=metadata "$TEST_IMG" 64M
test_qemu_img create -f $IMGFMT -o preallocation=1234 "$TEST_IMG" 64M

echo "== Check encryption option =="
echo
test_qemu_img create -f $IMGFMT -o encryption=off "$TEST_IMG" 64M
test_qemu_img create -f $IMGFMT --object secret,id=sec0,data=123456 -o encryption=on,encrypt.key-secret=sec0 "$TEST_IMG" 64M

echo "== Check lazy_refcounts option (only with v3) =="
echo
test_qemu_img create -f $IMGFMT -o compat=1.1,lazy_refcounts=off "$TEST_IMG" 64M
test_qemu_img create -f $IMGFMT -o compat=1.1,lazy_refcounts=on "$TEST_IMG" 64M

test_qemu_img create -f $IMGFMT -o compat=0.10,lazy_refcounts=off "$TEST_IMG" 64M
test_qemu_img create -f $IMGFMT -o compat=0.10,lazy_refcounts=on "$TEST_IMG" 64M

echo "== Expect error when backing file name is empty string =="
echo
test_qemu_img create -f $IMGFMT -b '' $TEST_IMG 1M

# success, all done
echo "*** done"
rm -f $seq.full
status=0
