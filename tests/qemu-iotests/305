#!/usr/bin/env bash
# group: rw quick
#
# Test the handling of errors in write requests with multiple allocations
#
# Copyright (C) 2020 Igalia, S.L.
# Author: Alberto Garcia <berto@igalia.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# creator
owner=berto@igalia.com

seq=`basename $0`
echo "QA output created by $seq"

status=1    # failure is the default!

_cleanup()
{
    _cleanup_test_img
}
trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_supported_fmt qcow2
_supported_proto file fuse
_supported_os Linux
_unsupported_imgopts cluster_size refcount_bits extended_l2 compat=0.10 data_file

echo '### Create the image'
_make_test_img -o refcount_bits=64,cluster_size=1k 1M

# The reference counts of the clusters for the first 123k of this
# write request are stored in the first refcount block. The last
# cluster (guest offset 123k) is referenced in the second refcount
# block.
echo '### Fill the first refcount block and one data cluster from the second'
$QEMU_IO -c 'write 0 124k' "$TEST_IMG" | _filter_qemu_io

echo '### Discard two of the last data clusters, leave one in the middle'
$QEMU_IO -c 'discard 121k 1k' "$TEST_IMG" | _filter_qemu_io
$QEMU_IO -c 'discard 123k 1k' "$TEST_IMG" | _filter_qemu_io

echo '### Corrupt the offset of the second refcount block'
refcount_table_offset=$(peek_file_be "$TEST_IMG" 48 8)
poke_file "$TEST_IMG" $(($refcount_table_offset+14)) "\x06"

# This tries to allocate the two clusters discarded earlier (guest
# offsets 121k and 123k). Their reference counts are in the first and
# second refcount blocks respectively, but only the first one can be
# allocated correctly because the second entry of the refcount table
# is corrupted.
echo '### Try to allocate the discarded clusters again'
$QEMU_IO -c 'write 121k 3k' "$TEST_IMG" | _filter_qemu_io

# success, all done
echo "*** done"
rm -f $seq.full
status=0
